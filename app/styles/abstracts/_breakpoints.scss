// Standardized breakpoints for consistent responsive design
$breakpoints: (
  xs: 0,
  sm: 576px,   // Small phones
  md: 768px,   // Tablets
  lg: 992px,   // Small desktops
  xl: 1200px,  // Large desktops
  xxl: 1400px  // Extra large screens
);

// Responsive mixins for consistent media queries
@mixin respond-up($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}.";
  }
}

@mixin respond-down($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: (map-get($breakpoints, $breakpoint) - 1px)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}.";
  }
}

@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    @media (min-width: map-get($breakpoints, $lower)) and (max-width: (map-get($breakpoints, $upper) - 1px)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$lower} or #{$upper}.";
  }
}

// Container width utilities
@mixin container($max-width: 1200px) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
  
  @include respond-up(sm) {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }
  
  @include respond-up(lg) {
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

// Responsive padding utility
@mixin responsive-padding($base: 1rem) {
  padding: $base;
  
  @include respond-up(sm) {
    padding: $base * 1.5;
  }
  
  @include respond-up(md) {
    padding: $base * 2;
  }
  
  @include respond-up(lg) {
    padding: $base * 2.5;
  }
}